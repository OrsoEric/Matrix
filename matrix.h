/**********************************************************************************
**	ENVIROMENT VARIABILE
**********************************************************************************/

#ifndef MATRIX_H_
	#define MATRIX_H_

/**********************************************************************************
**	GLOBAL INCLUDES
**********************************************************************************/

#ifndef _GLIBCXX_VECTOR
	#error "This header requires <vector>. Make sure you include <vector> in every .cpp"
#endif

/**********************************************************************************
**	DEFINES
**********************************************************************************/

/**********************************************************************************
**	MACROS
**********************************************************************************/

//If my custom trace macros are not included, disable them in the code
#ifndef _DEBUG_H
	#define DEBUG_VARS_PROTOTYPES()
	#define DEBUG_VARS()
	#define DSHOW( ... )
	#define DSTART( ... )
	#define DSTOP()
	#define DTAB( ... )
	#define DPRINT( ... )
	#define DPRINT_NOTAB( ... )
	#define DENTER( ... )
	#define DRETURN( ... )
	#define DENTER_ARG( ... )
	#define DRETURN_ARG( ... )
#endif

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

//Assign class to a namespace
namespace User
{

/**********************************************************************************
**	TYPEDEFS
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: STRUCTURES
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: GLOBAL VARIABILES
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: CLASS
**********************************************************************************/

/****************************************************************************
**	Class
**	Matrix
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	Minimal wrapper of vector to handle bidimensional arrays with 2D subscripts
****************************************************************************/

template <class T>
class Matrix
{
	//Visible to all
	public:
		///--------------------------------------------------------------------------
		///	CONSTRUCTORS
		///--------------------------------------------------------------------------

		//Default constructor
		Matrix( void );
		//Initialized constructor
		Matrix( unsigned int rows, unsigned int cols );
		//Initialized constructor, initialize content
		Matrix( unsigned int rows, unsigned int cols, T init_value );

		///--------------------------------------------------------------------------
		///	DESTRUCTORS
		///--------------------------------------------------------------------------

		//Default destructor
		~Matrix( void );

		///--------------------------------------------------------------------------
		///	OPERATORS
		///--------------------------------------------------------------------------

		//access to element of the array. fast, no checks.
		T &at( unsigned int row, unsigned int col );
		//Overload assignment operator
		void operator = (const User::Matrix<T> &source );
		//Overload multiplication operator. Execute matrix multiplication
		User::Matrix<T> operator * (User::Matrix<T> &source);

		///--------------------------------------------------------------------------
		///	SETTERS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	GETTERS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	TESTERS
		///--------------------------------------------------------------------------

		//check whatever the Matrix is valid (not empty and dimensions consistent
		bool is_invalid( void );
		//check whatever the coordinates are in bound
		bool is_invalid( unsigned int row, unsigned int col );

		///--------------------------------------------------------------------------
		///	PUBLIC METHODS
		///--------------------------------------------------------------------------

		//show the content of the matrix
		bool show( void );
		//Save the content of the matrix on a file
		//bool save( std::string name );
		//Save the content of the matrix on a file
		//bool save( std::fstream out );

		///--------------------------------------------------------------------------
		///	PUBLIC STATIC METHODS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	PUBLIC VARS
		///--------------------------------------------------------------------------

	//Visible to derived classes
	protected:
		///--------------------------------------------------------------------------
		///	PROTECTED METHODS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	PROTECTED VARS
		///--------------------------------------------------------------------------

	//Visible only inside the class
	private:
		///--------------------------------------------------------------------------
		///	PRIVATE METHODS
		///--------------------------------------------------------------------------

		//initialize Matrix structure
		bool init( void );
		//Here so that i can easly copy the code.
		bool dummy( void );

		///--------------------------------------------------------------------------
		///	PRIVATE VARS
		///--------------------------------------------------------------------------

		//dimensions
		unsigned int g_rows, g_cols;
		//container
		std::vector<T> g_data;

};	//End Class: Matrix

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

} //End Namespace: User

#else
    #warning "Multiple inclusion of hader file"
#endif
